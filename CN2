import java. io.*; 
public class stuffing
{

public static void main(String[]args) throws IOException
{ String data;

BufferedReader br= new BufferedReader(new InputStreamReader(System.in));

 
System.out.print("\n Enter the data chream.");
data =br.readLine();

String str;

int select;
System.out.print("\n The various Framing techniques of :\n");
System.out.print("1) character count in ");

System.out.print("2) character stuffing in");

System.out.print("3) But stuffing \n ");

System.out.print("Enter the number for selection");

str=br.readLine();
select= Integer.parseInt(str);
switch(select)
{ 
case 1: System.out.print("Total no of character is:"+count(data));
	break;

case 2: System.out.print("\n Enter the flag stream:");
	String flag;
	flag=br.readLine();
	System.out.print("\n The frame after processing:"+Charstuff (data,flag));
	break;
case 3: System.out.print("In The frame after processing :"+Bitstuff(data));
	 break;
}}

public static int count(String input)
{ return input.length();}


public static String Charstuff(String input, String flag)
 { int len = input.length();

int lenf= flag.length();
 char na[] = new char [2*len];

int ni=0, fromindex=0; 
for (int i=0; i<len;i++)
{
 fromindex= input.indexOf(flag, i);
 if (fromindex ==i)
{
na[ni]='e';
ni++;

for(int j=0; j <lenf; i++, j++) {
 na[ni] = flag.charAt(i); 
ni++;
}
}
else if(i< fromindex)
{ 
for (int l=i; i< fromindex; l++,i++) { 
na[ni] = input.charAt(l);
ni++;
}


} else if( fromindex ==-1)

{ 
for (int k=i; k<len; k++, i++)
{
 na [ni]= input.charAt(k);
ni++;
}
break;
}
i=i-1;
}
String output=new String (na, 0, ni);
 return flag + output + flag;
}

public static String Bitstuff (String input)
 { int count=0, ni = 0;

int len= input.length();
int max=len/5;

char na[] = new char[len + max];

for (int i=0; i<len; i++)
 {
 if (input.charAt(i)=='1')
{
count++;

if (count ==5)

{ count =0;

na[ni]= input.charAt(i);


ni++;

na[ni]='0';

ni++;

continue;
}}

else { count=0; }

na[ni] = input.charAt(i);
ni++;
}

String output= new String (na, 0, ni);

return output;
}}
