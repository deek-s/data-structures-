import numpy as np

class RBFNetwork:
    def __init__(self, num_centers, sigma):
        self.num_centers = num_centers
        self.sigma = sigma
        self.centers = None
        self.weights = None

    def _calculate_activations(self, X):
        num_samples = X.shape[0]
        num_features = X.shape[1]
        activations = np.zeros((num_samples, self.num_centers))

        for i in range(num_samples):
            for j in range(self.num_centers):
                distance = np.linalg.norm(X[i] - self.centers[j])
                activations[i][j] = np.exp(-distance**2 / (2 * self.sigma**2))

        return activations

    def fit(self, X, y):
        self.centers = X[np.random.choice(X.shape[0], self.num_centers, replace=False)]
        activations = self._calculate_activations(X)

        self.weights = np.linalg.pinv(activations.T @ activations) @ activations.T @ y

    def predict(self, X):
        activations = self._calculate_activations(X)
        return activations @ self.weights

# Example usage
X_train = np.array([[0], [1], [2], [3], [4], [5]])
y_train = np.array([0, 1, 0, 1, 0, 1])

X_test = np.array([[1.5], [3.5]])

num_centers = 2
sigma = 1.0
rbf_net = RBFNetwork(num_centers, sigma)
rbf_net.fit(X_train, y_train)
predictions = rbf_net.predict(X_test)
print(predictions)
