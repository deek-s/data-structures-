import numpy as np
import pandas as pd


class C45DecisionTree:
    def __init__(self):
        self.tree = None


    def fit(self, X, y):
        data = pd.concat([X, y], axis=1)
        print("data:", data)
        self.tree = self._build_tree(data, data.columns[:-1])


    def _build_tree(self, data, features):
        
        # If all target values are the same, return a leaf node with that value
        if len(data.iloc[:, -1].unique()) == 1:
            print("same target")
            return data.iloc[0, -1]


        # If there are no features left to split or data is too small, return the most common target value
        if len(features) == 0 or len(data) < 2:
            print("no features")
            return data.iloc[:, -1].mode()[0]


        # Find the best feature to split on using information gain ratio
        best_feature = self._choose_best_feature(data, features)
        print("best_feature", best_feature)


        # Create a new tree node with the best feature as the root
        tree_node = {best_feature: {}}
        print("tree node:",tree_node)


        # Remove the best feature from the list of features
        remaining_features = [f for f in features if f != best_feature]
        print("rem feat:", remaining_features)


        # Recursively build the subtrees
        for value in data[best_feature].unique():
            subtree_data = data[data[best_feature] == value].drop(columns=best_feature)
            subtree = self._build_tree(subtree_data, remaining_features)
            tree_node[best_feature][value] = subtree
            print("Best Feature of TN",tree_node[best_feature][value])
        return tree_node


    def _choose_best_feature(self, data, features):
        max_gain_ratio = -1
        best_feature = None


        for feature in features:
            print("feature", feature)
            gain_ratio = self._calculate_gain_ratio(data, feature)
            print("GR:",gain_ratio)
            if gain_ratio > max_gain_ratio:
                max_gain_ratio = gain_ratio
                best_feature = feature
                print("best feature:", best_feature)


        return best_feature


    def _calculate_entropy(self, data):
        class_counts = data.iloc[:, -1].value_counts()
        total_samples = len(data)
        entropy = 0


        for count in class_counts:
            p = count / total_samples
            entropy -= p * np.log2(p)
            print("entropy:",entropy)
        return entropy


    def _calculate_split_information(self, data, feature):
        split_counts = data[feature].value_counts()
        total_samples = len(data)
        split_info = 0


        for count in split_counts:
            p = count / total_samples
            split_info -= p * np.log2(p)
            print("split_info:",split_info)
        return split_info


    def _calculate_gain_ratio(self, data, feature):
        entropy_before_split = self._calculate_entropy(data)
        split_info = self._calculate_split_information(data, feature)


        weighted_entropy_after_split = 0
        total_samples = len(data)


        for value in data[feature].unique():
            subset = data[data[feature] == value]
            subset_entropy = self._calculate_entropy(subset)
            weight = len(subset) / total_samples
            weighted_entropy_after_split += weight * subset_entropy


        gain = entropy_before_split - weighted_entropy_after_split
        gain_ratio = gain / split_info if split_info != 0 else 0
        print("Gain Ratio:", gain_ratio)
        return gain_ratio


    def predict(self, X):
        return X.apply(self._predict_instance)


    def _predict_instance(self, instance):
        tree = self.tree


   #     while isinstance(tree, dict):
   #         feature = next(iter(tree))
  #          value = instance[feature]
  #          tree = tree[feature].get(value)


        return tree


# Example usage
if __name__ == "__main__":
    # Sample data
    data = pd.DataFrame({
        'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain'],
        'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild'],
        'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal'],
        'Windy': [False, True, False, False, False, True, True, False, False, True],
        'Play': [False, False, True, True, True, False, True, False, True, True]
    })


    X = data.drop('Play', axis=1)
    y = data['Play']


    clf = C45DecisionTree()
    clf.fit(X, y)


    # New instance for prediction
    new_instance = pd.Series({'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Windy': False})
    prediction = clf.predict(new_instance)
    print("Prediction:", prediction)


output
data:     Outlook Temperature Humidity  Windy   Play
0     Sunny         Hot     High  False  False
1     Sunny         Hot     High   True  False
2  Overcast         Hot     High  False   True
3      Rain        Mild     High  False   True
4      Rain        Cool   Normal  False   True
5      Rain        Cool   Normal   True  False
6  Overcast        Cool   Normal   True   True
7     Sunny        Mild     High  False  False
8     Sunny        Cool   Normal  False   True
9      Rain        Mild   Normal   True   True
feature Outlook
entropy: 0.44217935649972373
entropy: 0.9709505944546686
split_info: 0.5287712379549449
split_info: 1.0575424759098897
split_info: 1.5219280948873621
entropy: 0.31127812445913283
entropy: 0.8112781244591328
entropy: 0.0
entropy: 0.31127812445913283
entropy: 0.8112781244591328
Gain Ratio: 0.2115264814210478
GR: 0.2115264814210478
best feature: Outlook
feature Temperature
entropy: 0.44217935649972373
entropy: 0.9709505944546686
split_info: 0.5287712379549449
split_info: 1.0498609162048067
split_info: 1.5709505944546684
entropy: 0.38997500048077083
entropy: 0.9182958340544896
entropy: 0.38997500048077083
entropy: 0.9182958340544896
entropy: 0.31127812445913283
entropy: 0.8112781244591328
Gain Ratio: 0.060766929638204084
GR: 0.060766929638204084
feature Humidity
entropy: 0.44217935649972373
entropy: 0.9709505944546686
split_info: 0.5
split_info: 1.0
entropy: 0.44217935649972373
entropy: 0.9709505944546686
entropy: 0.2575424759098898
entropy: 0.7219280948873623
Gain Ratio: 0.12451124978365313
GR: 0.12451124978365313
feature Windy
entropy: 0.44217935649972373
entropy: 0.9709505944546686
split_info: 0.44217935649972373
split_info: 0.9709505944546686
entropy: 0.38997500048077083
entropy: 0.9182958340544896
entropy: 0.5
entropy: 1.0
Gain Ratio: 0.020570659450692974
GR: 0.020570659450692974
best_feature Outlook
tree node: {'Outlook': {}}
rem feat: ['Temperature', 'Humidity', 'Windy']
feature Temperature
entropy: 0.31127812445913283
entropy: 0.8112781244591328
split_info: 0.5
split_info: 1.0
split_info: 1.5
entropy: 0.0
entropy: 0.0
entropy: 0.0
Gain Ratio: 0.5408520829727552
GR: 0.5408520829727552
best feature: Temperature
feature Humidity
entropy: 0.31127812445913283
entropy: 0.8112781244591328
split_info: 0.31127812445913283
split_info: 0.8112781244591328
entropy: 0.0
entropy: 0.0
Gain Ratio: 1.0
GR: 1.0
best feature: Humidity
feature Windy
entropy: 0.31127812445913283
entropy: 0.8112781244591328
split_info: 0.31127812445913283
split_info: 0.8112781244591328
entropy: 0.38997500048077083
entropy: 0.9182958340544896
entropy: 0.0
Gain Ratio: 0.15106563978903303
GR: 0.15106563978903303
best_feature Humidity
tree node: {'Humidity': {}}
rem feat: ['Temperature', 'Windy']
same target
Best Feature of TN False
same target
Best Feature of TN True
Best Feature of TN {'Humidity': {'High': False, 'Normal': True}}
same target
Best Feature of TN True
feature Temperature
entropy: 0.31127812445913283
entropy: 0.8112781244591328
split_info: 0.5
split_info: 1.0
entropy: 0.0
entropy: 0.5
entropy: 1.0
Gain Ratio: 0.31127812445913283
GR: 0.31127812445913283
best feature: Temperature
feature Humidity
entropy: 0.31127812445913283
entropy: 0.8112781244591328
split_info: 0.31127812445913283
split_info: 0.8112781244591328
entropy: 0.0
entropy: 0.38997500048077083
entropy: 0.9182958340544896
Gain Ratio: 0.15106563978903303
GR: 0.15106563978903303
feature Windy
entropy: 0.31127812445913283
entropy: 0.8112781244591328
split_info: 0.5
split_info: 1.0
entropy: 0.0
entropy: 0.5
entropy: 1.0
Gain Ratio: 0.31127812445913283
GR: 0.31127812445913283
best_feature Temperature
tree node: {'Temperature': {}}
rem feat: ['Humidity', 'Windy']
same target
Best Feature of TN True
feature Humidity
entropy: 0.5
entropy: 1.0
split_info: 0.0
entropy: 0.5
entropy: 1.0
Gain Ratio: 0
GR: 0
best feature: Humidity
feature Windy
entropy: 0.5
entropy: 1.0
split_info: 0.5
split_info: 1.0
entropy: 0.0
entropy: 0.0
Gain Ratio: 1.0
GR: 1.0
best feature: Windy
best_feature Windy
tree node: {'Windy': {}}
rem feat: ['Humidity']
same target
Best Feature of TN True
same target
Best Feature of TN False
Best Feature of TN {'Windy': {False: True, True: False}}
Best Feature of TN {'Temperature': {'Mild': True, 'Cool': {'Windy': {False: True, True: False}}}}
Prediction: Outlook        {'Outlook': {'Sunny': {'Humidity': {'High': Fa...
Temperature    {'Outlook': {'Sunny': {'Humidity': {'High': Fa...
Humidity       {'Outlook': {'Sunny': {'Humidity': {'High': Fa...
Windy          {'Outlook': {'Sunny': {'Humidity': {'High': Fa...
dtype: object

