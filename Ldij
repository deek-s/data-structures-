#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
// Number of vertices in the graph
#define V 9
// A utility function to find the vertex with minimum distance value, from the set of vertices not yet included in
shortest path tree
intminDistance(intdist[], bool parent[])
{
 // Initialize min value
int min = INT_MAX, min_index;
for (int i = 0; i < V; i++)
if (parent[i] == false &&dist[i] <= min)
min = dist[i], min_index = i;
returnmin_index;
}
// A utility function to print the constructed distancearray
voidprintSolution(intdist[])
{
int i;
printf("Vertex \t\t Distance from Source\n");
for ( i = 0; i < V; i++)
printf("0->%d \t\t\t %d\n", i, dist[i]);
}
Department of CSE Page 16
// Function that implements Dijkstra's single sourceshortest path algorithm for a graph represented using
adjacency matrix representation
Void Dijkstra (int graph[V][V], intsrc)
{
Int dist[V],i,count,v; // The output array. dist[i] will hold the shortest distance from src to i
bool parent[V];
// parent[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is
 // finalized dist[i] = INT_MAX Initialize all distances as INFINITE and parent[] as false
for ( i = 0; i < V; i++)
dist[i] = INT_MAX, parent[i] = false;
 // Distance of source vertex from itself is always 0
dist[src] = 0;
 // Find shortest path for all vertices
for ( count = 0; count < V - 1; count++)
{
// Pick the minimum distance vertex from the set ofvertices not yet processed. u is always equal tosrc in the first
iteration.
int u = minDistance(dist, parent);
 // Mark the picked vertex as processed
parent[u] = true;
 // Update dist value of the adjacent vertices of thepicked vertex.
for ( i = 0; i < V; i++)
 // Update dist[v] only if is not in parent,there is an edge from u to v, and total
 // weight of path from srcto v through u issmaller than current value of dist[v]
if (parent[i] ==false &&dist[u] != INT_MAX
&& graph[u][i]!=0 &&dist[u] + graph[u][i] <dist[i])
dist[i] = dist[u] + graph[u][i];
 }
 // print the constructed distance array
printSolution(dist);
}
int main()
{
/* Let us create the example graph discussed above */
int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
{ 4, 0, 8, 0, 0, 0, 0, 11, 0 },
{ 0, 8, 0, 7, 0, 4, 0, 0, 2 },
{ 0, 0, 7, 0, 9, 14, 0, 0, 0 },
{ 0, 0, 0, 9, 0, 10, 0, 0, 0 },
{ 0, 0, 4, 14, 10, 0, 2, 0, 0 },
{ 0, 0, 0, 0, 0, 2, 0, 1, 6 },
{ 8, 11, 0, 0, 0, 0, 1, 0, 7 },
{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
 // Function call
dijkstra(graph, 0);
